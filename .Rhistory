load("C:/Users/jerem/Downloads/credit_risk_modeling_r.Rmd")
# Load the gmodels package
library(gmodels)
# View the structure of loan_data
str(loan_data)
# Get loan_data and view its structure
loan_data <- read.csv('loan_data.csv')
# Get loan_data and view its structure
loan_data <- read.csv(getwd()+'loan_data.csv')
# Get loan_data and view its structure
getwd()
loan_data <- read.csv(getwd()+'/GitHub/Credit risk/loan_data.csv')
# Get loan_data and view its structure
loan_data <- read.csv(getwd()+'\\GitHub\\Credit risk\\loan_data.csv')
# Get loan_data and view its structure
loan_data <- read.csv(getwd()+"\\GitHub\\Credit risk\\loan_data.csv")
# Get loan_data and view its structure
getwd()
loan_data <- read.csv(getwd()+"/GitHub/Credit risk/loan_data.csv")
# Get loan_data and view its structure
loan_data <- read.csv("C:Users/jerem/Documents/GitHub/Credit risk/loan_data.csv")
# Get loan_data and view its structure
loan_data <- read.csv("C:\Users\jerem\Documents\GitHub\Credit risk\loan_data.csv")
# Get loan_data and view its structure
setwd("C:\Users\jerem\Documents\GitHub\Credit risk')
# Get loan_data and view its structure
setwd('C:/Users/jerem/Documents/GitHub/Credit risk')
loan_data <- read.csv('loan_data.csv')
str(loan_data)
# Check proportion of all loans default, 1 indicates default
CrossTable(loan_data$loan_status)
# Check proportion of all loans default, 1 indicates default
CrossTable(loan_data$loan_status)
# Load the gmodels package
library(gmodels)
# Check proportion of all loans default, 1 indicates default
CrossTable(loan_data$loan_status)
# Check proportion of all loans default, 1 indicates default
CrossTable(loan_data$loan_status, prop.c = TRUE)
# Check proportion of all loans default, 1 indicates default
CrossTable(loan_data$loan_status)
# Check proportion of all loans default, 1 indicates default
CrossTable(loan_data$loan_status, prop.chisq=FALSE)
fix(loan_data)
loan_data$credit.policy
min(loan_data$credit.policy)
loan_data <- read.csv('cr2_loans.csv')
loan_data <- read.csv('cr_loans2.csv')
loan_data <- read.csv('cr_loan2.csv')
str(loan_data)
# Load the gmodels package
library(gmodels)
min(loan_data$credit.policy)
# Check proportion of all loans default, 1 indicates default
CrossTable(loan_data$loan_status)
# Check default rate by credit grade
CrossTable(loan_data$grade,loan_data$loan_status,prop.c=FALSE, prop.t=FALSE, prop.chisq=FALSE)
# Check default rate by credit grade
CrossTable(loan_data$grade,loan_data$loan_status,
prop.c=FALSE, prop.t=FALSE, prop.chisq=FALSE)
# Check default rate by credit grade
CrossTable(loan_data$loan_grade,loan_data$loan_status,
prop.c=FALSE, prop.t=FALSE, prop.chisq=FALSE)
loan_data <- read.csv('loan_data.csv')
# Check proportion of all loans default, 1 indicates default
CrossTable(loan_data$loan_status)
# Check default rate by credit grade
CrossTable(loan_data$loan_grade,loan_data$loan_status,
prop.c=FALSE, prop.t=FALSE, prop.chisq=FALSE)
# Check default rate by credit grade
# As expected, the default rate is negatively correlated to the grade
CrossTable(loan_data$loan_grade,loan_data$loan_status,
prop.c=FALSE, prop.t=FALSE, prop.chisq=FALSE)
loan_data <- read.csv('loan_data.csv')
str(loan_data)
# Load the gmodels package
library(gmodels)
# Check proportion of all loans default, 1 indicates default
# We see on average 21.8% of loans default
CrossTable(loan_data$loan_status)
# Check default rate by credit grade
# As expected, the default rate is negatively correlated to the grade
CrossTable(loan_data$loan_grade,loan_data$loan_status,
prop.c=FALSE, prop.t=FALSE, prop.chisq=FALSE)
loan_data
attach(loan_data)
str(loan_data)
# Check proportion of all loans default, 1 indicates default
# We see on average 21.8% of loans default
CrossTable(loan_status)
# Check default rate by credit grade
# As expected, the default rate is negatively correlated to the grade
CrossTable(loan_grade, loan_status,
prop.c=FALSE, prop.t=FALSE, prop.chisq=FALSE)
hist_1 <- hist(loan_data$loan_amnt)
# Get a histogram of the amounts loaned
hist_2 <- hist(loan_data$loan_amnt, xlab = "Loan amount", main = "Histogram of the loan amount")
# Look at the age and income variables together
plot(loan_data$age, loan_data$annual_inc, xlab = "Age", ylab = "Annual Income")
View(loan_data)
# Look at the age and income variables together
plot(loan_data$person_age, loan_data$person_income, xlab = "Age", ylab = "Income")
# Remove the clear outlier
index_highage <- which(loan_data$person_age > 122)
new_data <- loan_data[-index_highage, ]
#--
plot(new_data$person_age, new_data$person_income, xlab = "Age", ylab = "Income")
# Look at the interest rates
summary(int_rate)
# Look at the interest rates
summary(loan_int_rate)
nrows(loan_int_rate)
nrow(loan_int_rate)
dim(loan_int_rate)
dim(loan_data)
dim(loan_data)
# Look at the interest rates
summary(loan_int_rate)
dim(loan_data)
plot(loan_int_rate)
hist(loan_int_rate)
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate, breaks=c(-Inf, 10, 15, 20,Inf))
hist(int_cat)
plot(int_cat)
int_cat['Null'] <- sum(is.na(loan_int_rate))
summary(int_cat)
?describe
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat_1 <- cut(loan_int_rate, breaks=c(-Inf, 5, 10, 15, 20,Inf))
summary(int_cat)
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate, breaks=c(-Inf, 5, 10, 15, 20,Inf))
barplot(int_cat)
plot(int_cat)
type(int_cat)
type?
?
-
oe-fe
?type
typeof(int_cat)
int_cat
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate, breaks=c(-Inf, 5, 10, 15, 20,Inf))
plot(int_cat)
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate, breaks=c(-Inf, 4, 8, 12, 16, 20,Inf))
plot(int_cat)
plot(loan_int_rate)
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate)
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate, breaks=10)
plot()
plot(int_cat)
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate, breaks=c(0,5,10,15,20))
plot(int_cat)
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate, breaks=c(0,5,10,15,20, Inf))
plot(int_cat)
ggplot(int_cat)
library(ggplot)
install.packages(ggplot2)
library("ggplot2")
import.packages("ggplot2")
install.packages("tidyverse")
library(ggplot2)
ggplot(int_cat)
ggplot(data=int_cat)
int_cat
bins(int_cat)
ggplot(as_tibble(int_cat))
ggplot(tibble(int_cat))
library(tibble)
ggplot(as_tibble(int_cat))
as_tibble(int_cat)
ggplot(data = as_tibble(int_cat), mapping = aes(x=value))
ggplot(data = as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar(fill="bisque",color="white",alpha=0.7)
ggplot(data = as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar()
ggplot(data = as_tibble(int_cat)) +
geom_bar()
ggplot(int_cat,aes(x,y))+geom_bar(stat="identity")
ggplot(as_tibble(int_cat)) + geom_bar()
ggplot(data = as_tibble(int_cat), mapping = aes(x=value)) + geom_bar()
ggplot(as_tibble(int_cat), mapping = aes(x=value)) + geom_bar()
ggplot(int_cat, mapping = aes(x=value)) + geom_bar()
ggplot(as_tibble(int_cat), mapping = aes(x=value)) + geom_bar()
+ labs(x, 'interest rate')
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate, breaks=c(0,5,10,15,20, Inf))
ggplot(as_tibble(int_cat), mapping = aes(x=value))
+ geom_bar()
+ labs(x, 'interest rate')
+ labs(x='interest rate')
+ geom_bar() + labs(x='interest rate')
ggplot(as_tibble(int_cat), mapping = aes(x=value)) + geom_bar() + labs(x='interest rate')
ggplot(as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate, breaks=c(-1,0,5,10,15,20, Inf))
ggplot(as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate, breaks=c(-Inf,0,5,10,15,20, Inf))
ggplot(as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
min(loan_int_rate)
min(loan_int_rate[!is.na(loan_int_rate)])
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate, breaks=c(5,10,15,20, Inf))
ggplot(as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate, breaks=c(5,9,13,17,21, Inf))
ggplot(as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate, breaks=5)
ggplot(as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
# We note 3116 null interest rates from 32581 data entries
# It is worth keeping these nulls
int_cat <- cut(loan_int_rate, breaks=c(5,8,11,14,17,20, Inf))
ggplot(as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
summary(int_rate)
# We replace these with the median interest rate
median_int <- median(loan_int_rate, na.rm=TRUE)
na_index <- which(is.na(loan_int_rate))
loan_data$int_rate[na_index] <- median_int
summary(loan_int_rate)
na_index
loan_data$loan_int_rate[na_index] <- median_int
summary(loan_int_rate)
# We replace these with the median interest rate
median_int <- median(loan_int_rate, na.rm=TRUE)
na_index <- which(is.na(loan_int_rate))
loan_data$loan_int_rate[na_index] <- median_int
summary(loan_int_rate)
summary(loan_data$loan_int_rate)
na_index <- which(is.na(loan_int_rate))
loan_data$loan_int_rate[na_index] <- median_int
attach(loan_data)
summary(loan_int_rate)
summary(loan_int_rate)
# Check proportion of all loans default, 1 indicates default
# We see on average 21.8% of loans default
CrossTable(loan_status)
# Check default rate by credit grade
# As expected, the default rate is negatively correlated to the grade
CrossTable(loan_grade, loan_status,
prop.c=FALSE, prop.t=FALSE, prop.chisq=FALSE)
# Get a histogram of the amounts loaned
hist_2 <- hist(loan_amnt, xlab = "Loan amount",
main = "Histogram of the loan amount")
# Look at the age and income variables together
plot(person_age, person_income, xlab = "Age", ylab = "Income")
# Remove the clear outliers of age over 100
index_highage <- which(person_age > 100)
new_data <- loan_data[-index_highage, ]
# Look at the interest rates
summary(loan_int_rate)
dim(loan_data)
# We note 3116 null interest rates from 32581 data entries
int_cat <- cut(loan_int_rate, breaks=c(5,8,11,14,17,20, Inf))
ggplot(as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
# We replace these with the median interest rate
median_int <- median(loan_int_rate, na.rm=TRUE)
na_index <- which(is.na(loan_int_rate))
loan_data$loan_int_rate[na_index] <- median_int
attach(loan_data)
summary(loan_int_rate)
# Set seed of 567
set.seed(567)
# Store row numbers for training set: index_train
index_train <- sample(1:nrow(loan_data), 2/3*nrow(loan_data))
# Create training set: training_set
training_set <- loan_data[index_train, ]
# Create test set: test_set
test_set <- loan_data[-index_train, ]
int_cat <- cut(loan_data, breaks=cut(5,8,11,14,17,20,Inf))
int_cat <- cut(loan_data$loan_int_rate, breaks=cut(5,8,11,14,17,20,Inf))
loan_data <- read.csv('loan_data.csv')
int_cat <- cut(loan_data$loan_int_rate, breaks=cut(5,8,11,14,17,20,Inf))
loan_data
attach(loan_data)
loan_int_rate
cut(loan_data$loan_int_rate, breaks=cut(5,8,11,14,17,20,Inf))
int_cat <- cut(loan_int_rate, breaks=c(5,8,11,14,17,20, Inf))
loan_data$int_cat <- int_cat
int_cat
int_rat_cat <- cut(loan_int_rate, breaks=c(5,8,11,14,17,20, Inf))
int_rat_cat[which(is.na(int_rat_cat))] <- 'NA'
int_rat_cat
which(is.na(int_rat_cat))
int_rat_cat[which(is.na(int_rat_cat))] <- as.factor('NA')
