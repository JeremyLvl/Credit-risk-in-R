# Get loan_data and view its structure
setwd('C:/Users/jerem/Documents/GitHub/Credit-risk-in-R')
loan_data <- read.csv('loan_data.csv')
attach(loan_data)
str(loan_data)
# Load the packages
library(gmodels)
library(ggplot2)
library(tibble)
# Check proportion of all loans default, 1 indicates default
# We see on average 21.8% of loans default
CrossTable(loan_status)
# Check default rate by credit grade
# As expected, the default rate is negatively correlated to the grade
CrossTable(loan_grade, loan_status,
prop.c=FALSE, prop.t=FALSE, prop.chisq=FALSE)
# Get a histogram of the amounts loaned
hist_2 <- hist(loan_amnt, xlab = "Loan amount",
main = "Histogram of the loan amount")
# Look at the age and income variables together
plot(person_age, person_income, xlab = "Age", ylab = "Income")
# Remove the clear outliers of age over 100
index_highage <- which(person_age > 100)
new_data <- loan_data[-index_highage, ]
# Look at the interest rates
summary(loan_int_rate)
dim(loan_data)
# We note 3116 null interest rates from 32581 data entries
int_cat <- cut(loan_int_rate, breaks=c(5,8,11,14,17,20, Inf))
ggplot(as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
# We replace these with the median interest rate
median_int <- median(loan_int_rate, na.rm=TRUE)
na_index <- which(is.na(loan_int_rate))
loan_data$loan_int_rate[na_index] <- median_int
attach(loan_data)
summary(loan_int_rate)
# Set seed of 567
set.seed(567)
# Store row numbers for training set: index_train
index_train <- sample(1:nrow(loan_data), 2/3*nrow(loan_data))
# Create training set: training_set
training_set <- loan_data[index_train, ]
# Create test set: test_set
test_set <- loan_data[-index_train, ]
summary(loan_data$loan_int_rate)
loan_data
write.csv(loan_data, 'loan_data_2.csv')
loan_data <- read.csv('loan_data_2.csv')
attach(loan_data)
# Set seed of 567
set.seed(567)
# Sample rows for training set
index_train <- sample(1:nrow(loan_data), 2/3*nrow(loan_data))
# Set training and testing sets
training_set <- loan_data[index_train, ]
test_set <- loan_data[-index_train, ]
# Build a log regression model for default given the interest rate
model <- glm(formula = loan_status ~ loan_int_rate)
# Build a log regression model for default given the interest rate
model <- glm(formula = loan_status ~ loan_int_rate, family = 'binomial',
data = training_set)
model
loan_int_rate
# Instead we categorise and keep an 'NA' value
int_cat <- cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))
ggplot(as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
loan_data$int_cat <- int_cat
loan_data
which(is.na(loan_data$int_cat))
int_cat
which(np.isna(int_cat))
which(is.na(int_cat))
int_cat
int_cat <- cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))
int_cat
attach(loan_data)
str(loan_data)
# Load the packages
library(gmodels)
library(ggplot2)
library(tibble)
# Check proportion of all loans default, 1 indicates default
# We see on average 21.8% of loans default
CrossTable(loan_status)
# Check default rate by credit grade
# As expected, the default rate is negatively correlated to the grade
CrossTable(loan_grade, loan_status,
prop.c=FALSE, prop.t=FALSE, prop.chisq=FALSE)
# Get a histogram of the amounts loaned
hist_2 <- hist(loan_amnt, xlab = "Loan amount",
main = "Histogram of the loan amount")
# Look at the age and income variables together
plot(person_age, person_income, xlab = "Age", ylab = "Income")
# Remove the clear outliers of age over 100
index_highage <- which(person_age > 100)
new_data <- loan_data[-index_highage, ]
# Look at the interest rates
summary(loan_int_rate)
dim(loan_data)
loan_data <- read.csv('loan_data.csv')
summary(loan_data)
str(loan_data)
# Look at the interest rates
summary(loan_int_rate)
dim(loan_data)
attach(loan_data)
# Look at the interest rates
summary(loan_int_rate)
dim(loan_data)
# We note 3116 null interest rates from 32581 data entries
# We can replace these with the median interest rate
median_int <- median(loan_int_rate, na.rm=TRUE)
na_index <- which(is.na(loan_int_rate))
loan_data_replaced <- loan_data
loan_data_replaced$loan_int_rate[na_index] <- median_int
# Instead we categorise and keep an 'NA' value
int_cat <- cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))
ggplot(as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
loan_data$int_cat <- int_cat
summary(loan_data$loan_int_rate)
summary(loan_data$int_cat)
write.csv(loan_data, 'loan_data_2.csv')
# Get loan_data
setwd('C:/Users/jerem/Documents/GitHub/Credit-risk-in-R')
loan_data <- read.csv('loan_data_2.csv')
attach(loan_data)
# Sample rows for training set
index_train <- sample(1:nrow(loan_data), 2/3*nrow(loan_data))
# Set training and testing sets
training_set <- loan_data[index_train, ]
test_set <- loan_data[-index_train, ]
# Build a log regression model for default given the interest rate
model <- glm(formula = loan_status ~ loan_int_rate, family = 'binomial',
data = training_set)
model
# Build a log regression model for default given the interest rate
model <- glm(formula = loan_status ~ int_cat, family = 'binomial',
data = training_set)
model
# Instead we categorise and keep an 'NA' category
loan_data$int_cat <- cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))
ggplot(as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
loan_data$int_cat
which(is.na(loan_data$int_cat))
loan_data$int_cat[which(is.na(loan_data$int_cat))] <- 'NA'
loan_data[which(is.na(loan_data$int_cat))]$int_cat <- 'NA'
int_cat
int_cat <- cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))
levels(int_cat) <- c(levels(int_cat), 'NA')
levels(int_cat)
# Instead we categorise and keep an 'NA' category
loan_data$int_cat <- cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))
levels(int_cat) <- c(levels(int_cat), 'missing')
# Instead we categorise and keep an 'NA' category
loan_data$int_cat <- cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))
levels(int_cat) <- c(levels(int_cat), 'missing')
loan_data$int_cat[na_index] <- 'missing'
# Instead we categorise and keep an 'NA' category
loan_data$int_cat <- cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))
levels(loan_data$int_cat) <- c(levels(loan_data$int_cat), 'missing')
loan_data$int_cat[na_index] <- 'missing'
ggplot(as_tibble(int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
loan_int_rate
loan_int_rate
loan_int_rate
# Instead we categorise and keep an 'NA' category
loan_data$int_cat <- cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))
levels(loan_data$int_cat) <- c(levels(loan_data$int_cat), 'missing')
loan_data$int_cat[na_index] <- 'missing'
ggplot(as_tibble(loan_data$int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
write.csv(loan_data, 'loan_data_2.csv')
# Get loan_data and view its structure
setwd('C:/Users/jerem/Documents/GitHub/Credit-risk-in-R')
loan_data <- read.csv('loan_data.csv')
attach(loan_data)
str(loan_data)
# Load the packages
library(gmodels)
library(ggplot2)
library(tibble)
#--
# Check proportion of all loans default, 1 indicates default
# We see on average 21.8% of loans default
CrossTable(loan_status)
# Check default rate by credit grade
# As expected, the default rate is negatively correlated to the grade
CrossTable(loan_grade, loan_status,
prop.c=FALSE, prop.t=FALSE, prop.chisq=FALSE)
# Get a histogram of the amounts loaned
hist_2 <- hist(loan_amnt, xlab = "Loan amount",
main = "Histogram of the loan amount")
#--
# Look at the age and income variables together
plot(person_age, person_income, xlab = "Age", ylab = "Income")
# Remove the clear outliers of age over 100
index_highage <- which(person_age > 100)
new_data <- loan_data[-index_highage, ]
#--
# Look at the interest rates
summary(loan_int_rate)
dim(loan_data)
# We note 3116 null interest rates from 32581 data entries
# We can replace these with the median interest rate
median_int <- median(loan_int_rate, na.rm=TRUE)
na_index <- which(is.na(loan_int_rate))
loan_data_replaced <- loan_data
loan_data_replaced$loan_int_rate[na_index] <- median_int
# Instead we categorise and keep an 'NA' category
loan_data$int_cat <- cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))
levels(loan_data$int_cat) <- c(levels(loan_data$int_cat), 'missing')
loan_data$int_cat[na_index] <- 'missing'
ggplot(as_tibble(loan_data$int_cat), mapping = aes(x=value)) +
geom_bar() + labs(x='interest rate')
write.csv(loan_data, 'loan_data_2.csv')
loan_data <- read.csv('loan_data_2.csv')
attach(loan_data)
loan_data <- read.csv('loan_data_2.csv')
attach(loan_data)
loan_data
# Set seed of 567
set.seed(567)
# Sample rows for training set
index_train <- sample(1:nrow(loan_data), 2/3*nrow(loan_data))
# Set training and testing sets
training_set <- loan_data[index_train, ]
test_set <- loan_data[-index_train, ]
# Build a log regression model for default given the interest rate
model <- glm(formula = loan_status ~ int_cat, family = 'binomial',
data = training_set)
model
model$coefficients
# Check coefficients of model
plot(model$coefficients)
# Check coefficients of model
barplot(model$coefficients)
# Check coefficients of model
lot(model$coefficients)
# Check coefficients of model
plot(model$coefficients)
barp
# Check coefficients of model
barplot(model$coefficients)
# Check coefficients of model
ggplot(model$coefficients)
ggplot(as_tibble(model$coefficients), mapping = aes(x=value)) + geom_bar()
model$coefficients
table(model$coefficients)
ggplot(table(model$coefficients), mapping = aes(x=value)) + geom_bar()
ggplot(as_tibble(model$coefficients), mapping = aes(x=value)) + geom_bar()
model$coefficients
barplot(model$coefficients)
model$coefficients %>%
mutate(a = factor(a, levels = unique(a))) %>%
ggplot() +
geom_bar(aes(x = a, y = b), stat = 'identity', fill = 'red')
ggplot(model$coefficients)
ggplot(as.data.frame(model$coefficients))
ggplot(as.data.frame(model$coefficients))
ggplot(as_tibble(model$coefficients), mapping = aes(x=value)) + geom_bar()
ggplot(as.data.frame(model$coefficients), mapping = aes(x=value)) + geom_bar()
ggplot(as_tibble(model$coefficients), mapping = aes(x=value)) + geom_bar()
as_tibble(model$coefficients)
model$coefficients
table(model$coefficients)
as.table(model$coefficients)
ggplot(as.table(model$coefficients), mapping = aes(x=value)) + geom_bar()
as.table(model$coefficients)
model$coefficients
oftype(model$coefficients)
?type
typeof(model$coefficients)
data.frame(model$coefficients)
as.data.frame(model$coefficients)
# Check coefficients of model
ggplot(as.data.frame(model$coefficients), mapping = aes(x=value)) + geom_bar()
ggplot(as.data.frame(model$coefficients), mapping = aes(x=value))
ggplot(as.data.frame(model$coefficients))
as.data.frame(model$coefficients)
ggplot(as.data.frame(model$coefficients), mapping = aes(x=model$coefficients))
ggplot(as.data.frame(model$coefficients), mapping = aes(x=model$coefficients))+geom_bar()
ggplot(as.data.frame(model$coefficients), mapping = aes(x=model$index))+geom_bar()
ggplot(as.data.frame(model$coefficients), mapping = aes(y=model$coefficients))+geom_bar()
data.frame(model$coefficients)
ggplot(as.data.frame(model$coefficients), mapping = aes(x=index,y=value))+geom_bar()
df <- data.frame(model$coefficients)
row.names(df)
rownames_to_column(df)
df
df <- rownames_to_column(df)
df
ggplot(as.data.frame(model$coefficients), mapping = aes(x=rowname,y=model.coefficients))+geom_bar()
ggplot(df, mapping = aes(x=rowname,y=model.coefficients))+geom_bar()
ggplot(df, mapping = aes(y=value))+geom_bar()
ggplot(df, mapping = aes(y=model.coefficients))+geom_bar()
ggplot(df, mapping = aes(x=rownames()))+geom_bar()
ggplot(df, mapping = aes(x=rownames)+geom_bar()
fefe
ggplot(df, mapping = aes(x=rownames))+geom_bar()
ggplot(df)+geom_bar(mapping=aes(x=rownames))
df$rowname
ggplot(df)+geom_bar(mapping=aes(x=df$rownames))
ggplot(df)+geom_bar(mapping=aes(x=df$rownames,y=df$model.coefficients))
ggplot(df)+geom_bar(mapping=aes(x=rownames,y=model.coefficients))
df
ggplot(df)+geom_bar(mapping=aes(y=model.coefficients))
ggplot(df, aes(x=rownames,y=model.coefficients))+geom_bar()
ggplot(df, aes(x=rowname,y=model.coefficients))+geom_bar()
typeof(rowname)
typeof(df$rowname)
ggplot(df, aes(x=rowname,y=model.coefficients))+geom_bar(stat='identity')
# Check coefficients of model
coefs <- rownames_to_columns(data.frame(model$coefficients))
# Check coefficients of model
coefs <- rownames_to_column(data.frame(model$coefficients))
ggplot(coefs, aes(x=rowname,y=model.coefficients))+geom_bar(stat='identity')
coefs
models$coefficients
model$coefficients
ggplot(coefs, aes(x=rowname,y=model.coefficients))+geom_bar(stat='identity', x=rowname)
ggplot(coefs, aes(x=rowname,y=model.coefficients))+geom_bar(stat='identity', x=coefs$rowname)
rates <- cut(loan_data$loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))
rates
ggplot(coefs, aes(x=factor(rowname, rates),y=model.coefficients))+geom_bar(stat='identity')
rates <- c(5,7,9,11,13,15,17, Inf)
ggplot(coefs, aes(x=factor(rowname, rates),y=model.coefficients))+geom_bar(stat='identity')
loan_data$int_cat <- cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))
loan_data$int_cat
data.frame(model$coefficients)
coefs <- rownames_to_column(data.frame(model$coefficients))
coefs
coefs <- coefs %>%
mutate(x, substring(x,first=8))
?substring
coefs$rowname
typeof(coefs$rowname)
?mutate
coefs <- coefs %>%
mutate(rownames =substring(rownames,first=8))
library(tidyverse)
coefs <- coefs %>%
mutate(rownames =substring(rownames,first=8))
rlang::last_trace()
substring('1234567891234567',first=8)
coefs <- coefs %>%
mutate(rowname = substring(rowname,first=8))
coefs
# Check coefficients of model
coefs <- rownames_to_column(data.frame(model$coefficients))
coefs <- coefs %>%
mutate(rowname = str_remove(rowname, 'int_cat'))
coefs
coefs %>% arrange(rowname.Length)
coefs %>% arrange(rowname)
coefs %>% arrange(length(rowname))
coefs %>% arrange(0length(rowname))
coefs %>% arrange(-length(rowname))
coefs %>% arrange(-length(rowname))
?arrange
coefs %>% arrange(desc(length(rowname)))
coefs %>% arrange(asc(length(rowname)))
coefs %>% arrange(length(rowname))
loan_data$int_cat <- cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))
levels(loan_data$int_cat) <- c(levels(loan_data$int_cat), 'missing')
loan_data$int_cat
cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))
levels(cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf)))
factor(levels(cut(loan_int_rate, breaks=c(5,7,9,11,13,15,17, Inf))))
coefs
coefs$rowname
coefs$rowname $>$ slice(8,1:7)
coefs$rowname %>% slice(8,1:7)
?slice
arrange(coefs$rowname)
coefs %>% arrange(desc(length(rowname)))
coefs %>% arrange((length(rowname))
dw
coefs %>% arrange(length(rowname))
coefs %>% arrange(length(rowname)) + slice(c(1,5,6,7,2,3,4,8))
arr_coefs %>% arrange(length(rowname))
arrange(coefs, length(rowname))
arrange(coefs, length(rowname))[c(1,5,6,7,2,3,4,8)]
arrange(coefs, length(rowname))[c(1,5,6,7,2,3,4,8),]
?reorder
reorder(arrange(coefs, length(rowname)),c(1,5,6,7,2,3,4,8))
arrange(arrange(coefs, length(rowname)),c(1,5,6,7,2,3,4,8))
# Check coefficients of model
coefs <- rownames_to_column(data.frame(model$coefficients)) %>%
mutate(rowname = str_remove(rowname, 'int_cat')) %>%
arrange(length(rowname)) %>%
arrange(c(1,5,6,7,2,3,4,8))
ggplot(coefs, aes(x=rowname,y=model.coefficients))+geom_bar(stat='identity')
coefs
coefs$rowname <- factor(coefs$rowname, levels=coefs$rowname)
coefs
ggplot(coefs, aes(x=rowname,y=model.coefficients))+geom_bar(stat='identity')
# Check coefficients of model
coefs <- rownames_to_column(data.frame(model$coefficients)) %>%
mutate(rowname = str_remove(rowname, 'int_cat')) %>%
arrange(length(rowname)) %>%
arrange(c(1,5,6,7,2,3,4,8))
coefs$rowname <- factor(coefs$rowname, levels=coefs$rowname)
ggplot(coefs, aes(x=rowname,y=model.coefficients))+geom_bar(stat='identity')
coefs$rowname <- factor(coefs$rowname, levels=coefs$rowname)
summary(loan_data)
# Build a log regression model for default given the many variables
model <- glm(formula = loan_status ~ person_age + person_income + loan_grade + loan_amnt,
family = 'binomial', data = training_set)
summary(model)
?predict
pred = predict(multi_model, newdata = test_set, type = 'response')
# Build a log regression model for default given the many variables
multi_model <- glm(formula = loan_status ~ person_age + person_income + loan_grade + loan_amnt,
family = 'binomial', data = training_set)
pred = predict(multi_model, newdata = test_set, type = 'response')
pred
summary(pred)
plot(pred)
ecdf(pred)
plot(ecdf(pred))
?conf_matrix
??conf_matrix
confusionMatrix(pred, test_set)
library(caret)
table(pred, test_set)
red
pred
size(pred)
?size
dim(pred)
pred
table(pred, test_set$loan_status)
test_set$loan_status
?table
library('caret')
install.packages(caret)
install.packages("caret")
library(caret)
confusionMatrix(pred, test_set$loan_status)
table(pred, test_set$loan_status)
round_pred <- round(pred)
round_pred
confusionMatrix(round_pred, test_set$loan_status)
table(round_pred, test_set$loan_status)
# We look at the confusion matrix
table(round(pred), test_set$loan_status)
# We look at the confusion matrix
confusionMatrix(table(round(pred), test_set$loan_status))
# We look at the confusion matrix
summary(confusionMatrix(table(round(pred), test_set$loan_status)))
# We look at the confusion matrix
confusionMatrix(table(round(pred), test_set$loan_status))$Sensitivity
# We look at the confusion matrix
confusionMatrix(table(round(pred), test_set$loan_status))[Sensitivity]
# We look at the confusion matrix
confusionMatrix(table(round(pred), test_set$loan_status))['Sensitivity']
# We look at the confusion matrix
confusionMatrix(table(round(pred), test_set$loan_status)$byClass
['Sensitivity']
f
# We look at the confusion matrix
confusionMatrix(table(round(pred), test_set$loan_status))$byClass
confusionMatrix(cm)$byClass
# We look at the confusion matrix
cm <- table(round(pred), test_set$loan_status)
confusionMatrix(cm)$byClass
?round
confusionMatrix(cm)$byClass[c('Sensitivity','Specificity')]
confusionMatrix(cm)$byClass[c('Sensitivity','Specificity','Balanced Accuracy')]
# We look at the confusion matrix
cm <- table(round(pred), test_set$loan_status)
cm
# We look at the confusion matrix
table(pred, test_set$loan_status)
table(round(pred),test_set$loan_status)
table(round(pred),test_set$loan_status)
